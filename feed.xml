<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hassamwazir.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hassamwazir.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-01T01:31:38+00:00</updated><id>https://hassamwazir.github.io/feed.xml</id><title type="html">blank</title><subtitle>Ph.D. New York University </subtitle><entry><title type="html">NYU HPC Setup</title><link href="https://hassamwazir.github.io/blog/2023/nyu-hpc-setup/" rel="alternate" type="text/html" title="NYU HPC Setup"/><published>2023-12-21T16:40:16+00:00</published><updated>2023-12-21T16:40:16+00:00</updated><id>https://hassamwazir.github.io/blog/2023/nyu-hpc-setup</id><content type="html" xml:base="https://hassamwazir.github.io/blog/2023/nyu-hpc-setup/"><![CDATA[<p>This is a guide for logging into the NYU HPC cluster and streamlining that process.</p> <ul> <li> <p>The usual way to access the NYU Greene HPC cluster is via SSH. This information is taken from the official <a href="https://sites.google.com/nyu.edu/nyu-hpc/hpc-systems/greene/getting-started?authuser=0#h.niitlb309yhv">NYU HPC website</a>.</p> <ul> <li> <p>Simply open a terminal (Linux, Mac) or the Command Prompt (Windows 10) and enter the commands:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh &lt;netid&gt;@greene.hpc.nyu.edu ## you can skip this step if you  are on the NYU Network or using the NYU VPN
ssh &lt;netid&gt;@login.greene.hpc.nyu.edu
</code></pre></div> </div> <p>where <code class="language-plaintext highlighter-rouge">&lt;netid&gt;</code> is your NYU NetID. You will be prompted for your NYU NetID password. Enter it and you will be logged into the login node.</p> </li> </ul> </li> <li> <p>SSH keys can be set up as follows so that you don’t have to enter your password every time:</p> </li> <li> <p>On your local machine, generate a public/private key pair by running the command <code class="language-plaintext highlighter-rouge">ssh-keygen -t rsa</code> in a terminal. You will be prompted for a location to save the key pair. The default location is <code class="language-plaintext highlighter-rouge">~/.ssh/id_rsa</code> and <code class="language-plaintext highlighter-rouge">~/.ssh/id_rsa.pub</code> for the private and public keys, respectively. You can just press enter to accept the default location.</p> </li> <li> <p>Copy the public key to the login node by running the command <code class="language-plaintext highlighter-rouge">ssh-copy-id &lt;netid&gt;@login.greene.hpc.nyu.edu</code>. You will be prompted for your password. Enter it and the public key will be copied to the login node.</p> </li> <li> <p>Now you can log into the login node without entering your password by running the command <code class="language-plaintext highlighter-rouge">ssh &lt;netid&gt;@login.greene.hpc.nyu.edu</code>.</p> </li> <li> <p>As a final step, you can add the following lines to your <code class="language-plaintext highlighter-rouge">~/.ssh/config</code> file to make logging in easier:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Host for ssh'ing into the Greene cluster when on the NYU network
Host greene
  HostName greene.hpc.nyu.edu
  User &lt;netid&gt;

# Host for 'tunneling' into the hpc when logging in from outside of the NYU network (i.e. at home)
Host hpcgwtunnel
  HostName gw.hpc.nyu.edu
  ForwardX11 no
  LocalForward 8025 greene.hpc.nyu.edu:22
  User &lt;netid&gt;

# Host for sshing into the greene cluster when tunneled in from outside of the NYU network (i.e. at home)
Host greenetunnel
  HostName localhost
  Port 8025
  ForwardX11 yes
  User &lt;netid&gt;
</code></pre></div> </div> </li> </ul> <p><strong>Note:</strong> In Windows 10, the <code class="language-plaintext highlighter-rouge">~/.ssh/config</code> file is located at <code class="language-plaintext highlighter-rouge">C:\Users\&lt;username&gt;\.ssh\config</code>.</p> <p>Now you can log into the login node by simply running the command <code class="language-plaintext highlighter-rouge">ssh greene</code>.</p>]]></content><author><name></name></author><category term="post"/><category term="tutorial"/><summary type="html"><![CDATA[A guide for logging into the NYU HPC cluster and streamlining that process.]]></summary></entry><entry><title type="html">The z-domain transfer function and the Bilinear transformation.</title><link href="https://hassamwazir.github.io/blog/2020/imr-zdomain/" rel="alternate" type="text/html" title="The z-domain transfer function and the Bilinear transformation."/><published>2020-02-23T16:40:16+00:00</published><updated>2020-02-23T16:40:16+00:00</updated><id>https://hassamwazir.github.io/blog/2020/imr-zdomain</id><content type="html" xml:base="https://hassamwazir.github.io/blog/2020/imr-zdomain/"><![CDATA[<h2 id="understanding-maping">Understanding maping</h2> <p>The concept of mapping is used to transform one domain into another. It can be thought of as a value living in one space being transformed into another space. For example, the mapping of a point in the Cartesian plane to a point in the polar plane is a transformation from one space to another. In the context of control systems, the mapping of a transfer function from the <code class="language-plaintext highlighter-rouge">s-domain</code> to the <code class="language-plaintext highlighter-rouge">z-domain</code> is a transformation from the continuous-time domain to the discrete-time domain.</p> <p>This warping of the space is non-linear and the Bilinear transformation is used to account for this non-linearity.</p> <hr/> <h2 id="bilinear-transformation-of-a-transfer-function-from-the-s-domain-to-the-z-domain">Bilinear transformation of a transfer function from the s-domain to the z-domain</h2> <p>Assume we have a first-order system with a transfer function of the form:</p> <p>\begin{equation} G(s) = \frac{1}{s + 1} \end{equation}</p> <p>The z-domain transfer function is obtained by replacing \(s\) with \(\left(\frac{z - 1}{T}\right)\), where \(T\) is the sampling time. Let’s asume that a sampling time of \(1\) KHz was and the cut-off frequency \(\omega_c\) of \(10\) Hz`.</p> <p>Then, the time period \(T\) is given by: \begin{equation} T = \frac{1}{f_s} = \frac{1}{1000} = 0.001 \end{equation}</p> <p>The transfer functio is given as follows: \begin{equation} H(j\omega) = \frac{\omega_c}{s + \omega_c} \end{equation}</p> <p>The transformation from s-domain to the z-domain is non-linear. To account for this non-linearity, the cut-off frequency is prewarped and the resulting frequency is denoted by \(\omega_p\).</p> <p>\begin{equation} \omega_p = \frac{2}{T} \tan\left(\frac{\omega_c T}{2}\right) \end{equation}</p> \[\omega_p = 62.853\, \text{rad/s}\] <p>Once the frequency has been prewarped, the system can undergo Bilinear transformation using the relationship between \(s\) and \(z\).</p> \[H(z) = \frac{\omega_p}{s + \omega_p} \bigg|_{s = \frac{2}{T} \frac{z-1}{z+1}}\] <p>Here, we evaluate the transfer function at \(s = \frac{2}{T} \frac{z-1}{z+1}\). In other words, we replace \(s\) with \(\frac{2}{T} \frac{z-1}{z+1}\).</p> \[H(z) = \frac{\omega_p}{\frac{2}{T} \frac{z-1}{z+1} + \omega_p}\] \[H(z) = \frac{\omega_p (z + 1)}{2000(z - 1) + \omega_p (z + 1)}\] \[H(z) = \frac{62.853z + 62.853}{2000z - 2000 + 62.853z + 62.853}\] \[H(z) = \frac{62.853z + 62.853}{2062.853z - 1937.147}\] \[H(z) = \frac{0.031z + 0.031}{z - 0.939} = \frac{0.031z^{-1} + 0.031}{1 - 0.939z^{-1}}\] \[\frac{Y(z)}{U(z)} = \frac{0.031z^{-1} + 0.031}{1 - 0.939z^{-1}}\] \[Y(z)(1 - 0.939z^{-1}) = U(z)(0.031z^{-1} + 0.031)\] <p>Here, the \(z^{-1}\) operator is the delay operator. The equation can be rewritten as:</p> \[Y[n] - 0.939 Y[n - 1] = 0.031 (U[n] + U[n - 1])\] <p>where \(Y[n]\) is the output at time \(n\) and \(U[n]\) is the input at time \(n\). The equation can be rewritten as:</p> <p>\begin{equation} \label{eq:diff_eq} Y[n] = 0.939 Y[n - 1] + 0.031 (U[n] + U[n - 1]) \end{equation}</p> <p>Equation \eqref{eq:diff_eq} is called the difference equation. The difference equation is used to implement the system in a digital computer. now the system can be implemented on a digital device such as a microcontroller.</p> <p>Here is an example implementation in Python:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>    <span class="n">N</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1"># Number of samples
</span>
    <span class="c1"># Initialize arrays for Y and U
</span>    <span class="n">Y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span>  <span class="c1"># List to store Y values, initialized to 0
</span>    <span class="n">U</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>  <span class="c1"># Example input list U
</span>
    <span class="c1"># Calculate Y values based on the given equation
</span>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
        <span class="n">Y</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.939</span> <span class="o">*</span> <span class="n">Y</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mf">0.031</span> <span class="o">*</span> <span class="p">(</span><span class="n">U</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">U</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>

    <span class="c1"># Print the resulting Y values
</span>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Y[</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">] = </span><span class="si">{</span><span class="n">Y</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="post"/><category term="controls"/><summary type="html"><![CDATA[Understanding the z-domain transfer function and the bilinear transformation.]]></summary></entry></feed>